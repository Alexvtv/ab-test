{"version":3,"sources":["features/cards/cards.module.css","app/hooks.ts","features/cards/cardsSlice.ts","features/cards/parts/card/Card.tsx","features/cards/Cards.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx","features/cards/parts/card/card.module.css"],"names":["module","exports","useAppDispatch","useDispatch","useAppSelector","useSelector","cardsSlice","createSlice","name","initialState","list","isLoading","likedCardsId","deletedCardsId","likesFiltering","reducers","uploadData","state","action","payload","likeCard","includes","filter","id","push","deleteCard","changeFiltering","actions","selectList","cards","actualCards","data","selectLikedCards","isFiltering","Card","dispatch","likedCards","country","className","styles","card","cross","onClick","src","style","like","alt","Cards","isFilteringValue","useState","cardsToShow","setCardsToShow","container","filterPanel","filterText","listWrapper","slice","map","e","width","length","prev","showMoreButton","App","store","configureStore","reducer","cardsReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dda3d28b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"cards_container__2ly-l\",\"filterPanel\":\"cards_filterPanel__30qTQ\",\"filterText\":\"cards_filterText__dqRNM\",\"like\":\"cards_like__3M6MW\",\"listWrapper\":\"cards_listWrapper__1q6EQ\",\"list\":\"cards_list__2j3gz\",\"showMoreButton\":\"cards_showMoreButton__24MUa\"};","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import {createSlice, PayloadAction} from '@reduxjs/toolkit';\nimport {RootState} from '../../app/store';\n\ntype CardsStateT = {\n    list:Array<{\n        'state-province':string,\n        'country':string,\n        'web_pages':Array<string>,\n        'name':string,\n        'alpha_two_code':string,\n        'domains':Array<string>,\n        id:number\n    }>,\n    isLoading:boolean,\n    likedCardsId:Array<number>,\n    deletedCardsId:Array<number>,\n    likesFiltering:boolean,\n}\n\nconst initialState:CardsStateT = {\n    list: [],\n    isLoading: true,\n    likedCardsId: [],\n    deletedCardsId: [],\n    likesFiltering: false,\n};\n\nexport const cardsSlice = createSlice({\n    name: 'cards',\n    initialState,\n    reducers: {\n        uploadData: (state, action:PayloadAction<CardsStateT['list']>) => {\n            state.list = action.payload;\n            state.isLoading = false;\n        },\n        likeCard: (state, action:PayloadAction<number>) => {\n            const {payload} = action;\n            const {likedCardsId} = state;\n\n            likedCardsId.includes(payload)\n                ? state.likedCardsId = likedCardsId.filter(id => id !== payload)\n                : likedCardsId.push(payload);\n        },\n        deleteCard: (state, action:PayloadAction<number>) => {\n            const {payload} = action;\n            const {deletedCardsId} = state;\n\n            deletedCardsId.push(payload);\n        },\n        changeFiltering: (state) => {\n            state.likesFiltering = !state.likesFiltering;\n        },\n    },\n});\n\nexport const {likeCard, deleteCard, uploadData, changeFiltering} = cardsSlice.actions;\nexport const selectList = (state:RootState):{ isLoading:CardsStateT['isLoading'], data:CardsStateT['list'] } => {\n    const {likesFiltering, list, deletedCardsId, likedCardsId, isLoading} = state.cards;\n    const actualCards = list.filter(({id}) => !deletedCardsId.includes(id));\n\n    return isLoading\n        ? {isLoading: true, data: []}\n        : {\n            isLoading: false,\n            data: likesFiltering\n                ? actualCards.filter(({id}) => likedCardsId.includes(id))\n                : actualCards\n        };\n};\nexport const selectLikedCards = (state:RootState) => state.cards.likedCardsId;\nexport const isFiltering = (state:RootState) => state.cards.likesFiltering;\nexport default cardsSlice.reducer;\n","import React from 'react';\r\n\r\nimport {useAppSelector, useAppDispatch} from '../../../../app/hooks';\r\nimport {\r\n    selectLikedCards,\r\n    likeCard,\r\n    deleteCard\r\n} from '../../cardsSlice';\r\n\r\nimport styles from './card.module.css';\r\n\r\ntype dataT = {\r\n    data:{\r\n        'state-province':string,\r\n        'country':string,\r\n        'web_pages':Array<string>,\r\n        'name':string,\r\n        'alpha_two_code':string,\r\n        'domains':Array<string>,\r\n        id:number\r\n    }\r\n}\r\n\r\nexport const Card = ({data}:dataT) => {\r\n    const dispatch = useAppDispatch();\r\n    const likedCards = useAppSelector(selectLikedCards);\r\n\r\n    const {id, name, country} = data;\r\n\r\n    return (\r\n        <div className={styles.card}>\r\n            <div className={styles.cross} onClick={() => dispatch(deleteCard(id))}>&#x2716;</div>\r\n            <p className={styles.name}>{name}</p>\r\n            <p className={styles.country}>{country}</p>\r\n            <img\r\n                onClick={() => dispatch(likeCard(id))}\r\n                src={'/like.png'}\r\n                style={likedCards.includes(id) ? {} : {filter: 'grayscale(100%)'}}\r\n                className={styles.like}\r\n                alt={''}/>\r\n        </div>\r\n    );\r\n};\r\n","import React, {useState} from 'react';\r\n\r\nimport {useAppSelector, useAppDispatch} from '../../app/hooks';\r\nimport {\r\n    selectList,\r\n    isFiltering as isFilteringValue,\r\n    changeFiltering\r\n} from './cardsSlice';\r\nimport {Card} from './parts';\r\n\r\nimport styles from './cards.module.css';\r\n\r\nexport const Cards = () => {\r\n    const dispatch = useAppDispatch();\r\n    const {isLoading, data} = useAppSelector(selectList);\r\n    const isFiltering = useAppSelector(isFilteringValue);\r\n\r\n    const [cardsToShow, setCardsToShow] = useState(20);\r\n\r\n    return (\r\n        <div className={styles.container}>\r\n            <div className={styles.filterPanel}>\r\n                <p className={styles.filterText}>фильтр</p>\r\n                <img\r\n                    onClick={() => dispatch(changeFiltering())}\r\n                    src={'/like.png'}\r\n                    alt={''}\r\n                    className={styles.like}\r\n                    style={isFiltering ? {} : {filter: 'grayscale(100%)'}}/>\r\n            </div>\r\n\r\n            <div className={styles.listWrapper}>\r\n                {isLoading\r\n                    ? <p>Загрузка</p>\r\n                    : <div className={styles.list}>\r\n                        {data.slice(0, cardsToShow).map(e => <Card data={e} key={e.id}/>)}\r\n                        <div style={{width: '100%'}}>\r\n                            {data.length > cardsToShow\r\n                                ? <button\r\n                                    onClick={() => setCardsToShow(prev => prev + 20)}\r\n                                    className={styles.showMoreButton}>Показать ещё</button>\r\n                                : null}\r\n                        </div>\r\n                    </div>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, {useEffect} from 'react';\n\nimport {Cards} from './features/cards/Cards';\nimport {useAppDispatch} from './app/hooks';\nimport {uploadData} from './features/cards/cardsSlice';\n\nimport './App.css';\n\ntype UniversityT = {\n    'state-province':string,\n    'country':string,\n    'web_pages':Array<string>,\n    'name':string,\n    'alpha_two_code':string,\n    'domains':Array<string>,\n}\n\nfunction App() {\n    const dispatch = useAppDispatch();\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <Cards/>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","import {configureStore} from '@reduxjs/toolkit';\nimport cardsReducer from '../features/cards/cardsSlice';\n\nexport const store = configureStore({\n    reducer: {\n        cards: cardsReducer\n    },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'normalize.css';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"card_card__2NltT\",\"cross\":\"card_cross__3azCS\",\"name\":\"card_name__38evP\",\"country\":\"card_country__2A22I\",\"like\":\"card_like__3T2Au\"};"],"sourceRoot":""}